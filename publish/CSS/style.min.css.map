{"version":3,"sources":["_settings.sass","style.sass","breakpoints.scss"],"names":[],"mappings":"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","file":"style.min.css","sourcesContent":["@import \"./breakpoints\";\n\n$color_main: #08d9d6;\n$color_secondary: #ff2e63;\n\n$color_bg_light: #eaeaea;\n$color_bg: #252a34;\n$wh: #fff;\n\n\n//Fonts\n@font-face {\n   font-family: 'Roboto_R';\n   src: url('../Fonts/Roboto-Regular.ttf') format(\"truetype\"); }\n\n@font-face {\n   font-family: 'Roboto_B';\n   src: url('../Fonts/Roboto-Bold.ttf') format(\"truetype\"); }\n\n@font-face {\n   font-family: 'Roboto_M';\n   src: url('../Fonts/Roboto-Medium.ttf') format(\"truetype\"); }\n\n@font-face {\n   font-family: 'Pacifico';\n   src: url('../Fonts/Pacifico-Regular.ttf') format(\"truetype\"); }\n\n\n$Roboto_R: 'Roboto_R';\n$Roboto_B: 'Roboto_B';\n$Roboto_M: 'Roboto_M';\n$Pacifico: 'Pacifico';\n\n\n\n\n\n::-webkit-scrollbar {\n    width:  0.7rem;\n    height: 0.7rem;\n    @include media(\"<=phone\") {\n        width: 0.5rem;\n        height: 0.5rem; } }\n\n\n::-webkit-scrollbar-thumb {\n    background: $color_secondary; }\n\n\n::-webkit-scrollbar-track {\n    background: $color_bg; }\n\n\n\nsection {\n    width: 100%; }\n\n.flex-center {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-wrap: nowrap;\n    @include media(\"<=phone\") {\n        flex-wrap: wrap; } }\n\n\n.flex-h {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap; }\n\nbody {\n    background: $color_bg;\n    margin: 0;\n    padding: 0; }\n\n","@import \"./_settings\";\n@import \"./breakpoints\";\n\n\n@keyframes box_animation {\n    0% {\n        transform: scale(0.2);\n        opacity: 0.04;\n        background: $color_bg_light; }\n    50% {\n        transform: scale(1) rotate(180deg);\n        opacity: 0.06;\n        background: $color_secondary; }\n\n    75% {\n        background: $color_main; }\n\n    100% {\n        transform: scale(0.2);\n        opacity: 0.04;\n        background: $color_bg_light; } }\n\n@keyframes headline_anim {\n    0% {\n        transform: scale(0.3) rotate(-30deg);\n        opacity: 0; }\n\n    100% {\n        transform: scale(1) rotate(0deg);\n        opacity: 1; } }\n\n\n#Mini_Sites_section {\n    width: 100%;\n    background: $color_bg;\n    height: 100vh;\n    overflow: hidden;\n\n    .HeadlineBox {\n        margin-bottom: 100px;\n\n        @include media(\"<=phone\") {\n            margin-bottom: 100px; } }\n\n    h1 {\n        font-family: $Roboto_R;\n        text-align: center;\n        font-size: 5rem;\n        color: $color_main;\n        z-index: 2;\n        margin: 0;\n        padding: 0;\n        animation: headline_anim 0.5s ease;\n        @include media(\"<=LGdesktop\") {\n            font-size: 4rem; }\n\n        @include media(\"<=phone\") {\n            font-size: 2rem;\n            margin-bottom: 0; } }\n\n    h2 {\n        color: $color_secondary;\n        font-family: $Pacifico;\n        text-align: center;\n        font-size: 16rem;\n        z-index: 2;\n        margin: 0;\n        padding: 0;\n        animation: headline_anim 1s ease;\n        text-shadow: 0px 0px 0px rgba(255, 46, 98, 0);\n        transition: all 0.2s ease;\n        @include media(\"<=LGdesktop\") {\n            font-size: 14rem; }\n\n        @include media(\"<=phone\") {\n            font-size: 8rem;\n            margin-bottom: 0; } }\n\n    .Pfeil {\n        position: absolute;\n        bottom: 10vh;\n        display: inline-block;\n        z-index: 3;\n        img {\n            width: 5rem;\n            transition: all 0.3s ease; }\n\n        img:hover {\n           transform: scale(1.1 ); } }\n    .Pfeil:hover {\n        cursor: pointer; }\n\n    .BGContainer {\n        width: 100%;\n        position: absolute;\n        z-index: 1;\n        height: 95vh;\n        overflow: hidden;\n\n        .BGBox {\n            width: 1rem;\n            height: 1rem;\n            background: $color_bg_light;\n            margin: 20px 20px;\n            animation: box_animation 2s ease infinite;\n            transition: all 0.2s ease;\n            opacity: 0; } } }\n\n\n#Gallery {\n    background: $color_bg_light;\n    padding: 3rem 0% 20vh 0%;\n    h2 {\n        font-family: $Pacifico;\n        color: $color_bg;\n        font-size: 5rem;\n        text-align: center;\n        padding: 0;\n        margin: 0;\n\n        @include media(\"<=LGdesktop\") {\n            font-size: 5rem; }\n\n        @include media(\"<=phone\") {\n            font-size: 3rem; }\n\n        div {\n            display: inline-block;\n            padding: 0px 1rem; }\n        #mini {\n            color: $color_main; }\n        #sites {\n            color: $color_secondary; } }\n    .prolog {\n        font-family: $Roboto_M;\n        color: $color_bg;\n        font-size: 1rem;\n        width: 30%;\n        text-align: center;\n        opacity: 0.5;\n        margin: 0;\n        margin-bottom: 3rem;\n\n        @include media(\"<=LGdesktop\") {\n            width: 60%; }\n\n        @include media(\"<=phone\") {\n            width: 90%; } } }\n\n\n.container {\n    width: 70%;\n\n    @include media(\"<=phone\") {\n        width: 90%; }\n\n    @include media(\"<=desktop\") {\n        width: 90%; }\n\n\n\n\n\n    .mini_link {\n        display: inline-block;\n\n        .image_box {\n            width: 20rem;\n            height: 20rem;\n            margin: 10px 40px;\n            background: $color_bg;\n            overflow: hidden;\n            border-radius: 10px;\n            border: solid 5px $color_bg_light;\n            transition: all 0.2s ease;\n            box-shadow: 0px 0px 20px #00000046;\n            @include media(\"<=phone\") {\n                    width: 10rem;\n                    height: 10rem; }\n\n            img {\n                background: $color_main;\n                width: 20rem;\n                height: 20rem;\n                transition: all 0.2s ease;\n                z-index: 2;\n                @include media(\"<=phone\") {\n                    width: 10rem;\n                    height: 10rem; } }\n            h3 {\n                position: absolute;\n                font-family: $Roboto_M;\n                color: $color_bg_light;\n                text-shadow: 0px 0px 20px rgba(0, 0, 0, 0.561);\n                z-index: 3;\n                opacity: 0;\n                transform: scale(0.7);\n                transition: all 0.2s ease;\n                font-size: 2rem; } }\n\n\n        .image_box:hover {\n            border-radius: 20px;\n            img {\n                opacity: 0.5;\n                transform: scale(1.1); }\n            h3 {\n                opacity: 1;\n                transform: scale(1); } } } }\n\n\nfooter {\n    height: 5rem;\n    background: $color_bg;\n    font-family: $Roboto_R;\n    color: #eaeaeaa2;\n    text-align: center;\n    font-size: 1rem;\n    padding: 10px 0px; }\n\n\n\n","$breakpoints: (\r\n  \"phone\": 610px,\r\n  \"tablet\": 768px,\r\n  \"desktop\": 1366px,\r\n  \"LGdesktop\": 1920px\r\n) !default;\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///\t\t'retina2x': (\r\n///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\r\n///\t\t\t'(min-resolution: 192dpi)'\r\n///\t\t)\r\n///\t);\r\n///\r\n$media-expressions: (\r\n  \"screen\": \"screen\",\r\n  \"print\": \"print\",\r\n  \"handheld\": \"handheld\",\r\n  \"retina2x\": (\r\n    \"(-webkit-min-device-pixel-ratio: 2)\",\r\n    \"(min-resolution: 192dpi)\"\r\n  ),\r\n  \"retina3x\": (\r\n    \"(-webkit-min-device-pixel-ratio: 3)\",\r\n    \"(min-resolution: 350dpi)\"\r\n  )\r\n) !default;\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media(\">128px\") {}\r\n///\r\n///\t /* Generates: */\r\n///\t @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media(\">20em\") {}\r\n///\r\n///\t /* Generates: */\r\n///\t @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media(\">2.0rem\") {}\r\n///\r\n///\t /* Generates: */\r\n///\t @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  \"px\": 1,\r\n  \"em\": 0.01,\r\n  \"rem\": 0.1\r\n) !default;\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {List}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media(\">phone\") { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media(\">phone\", \"<=tablet\") { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media(\">=358px\", \"<850px\") { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media(\">desktop\", \"<=1350px\") { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media(\"retina2x\") { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\r\n///\r\n@mixin media($conditions...) {\r\n  @for $i from 1 through length($conditions) {\r\n    $conditions: set-nth(\r\n      $conditions,\r\n      $i,\r\n      parse-expression(nth($conditions, $i))\r\n    );\r\n  }\r\n\r\n  $branches: get-query-branches($conditions);\r\n  $query: \"\";\r\n\r\n  @each $branch in $branches {\r\n    @if (str-length($query) != 0) {\r\n      $query: $query + \", \";\r\n    }\r\n\r\n    $query: $query + $branch;\r\n  }\r\n\r\n  @media #{$query} {\r\n    @content;\r\n  }\r\n}\r\n\r\n///\r\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {List}   $expressions  - list of expressions\r\n///\r\n/// @throws `$expression` is not a valid expression\r\n///\r\n/// @return {List | Null}\r\n///\r\n@function get-query-branches($expressions) {\r\n  $result: \"\";\r\n  $has-groups: false;\r\n\r\n  // Getting initial snapshot and looking for groups\r\n  @each $expression in $expressions {\r\n    @if (str-length($result) != 0) {\r\n      $result: $result + \" and \";\r\n    }\r\n\r\n    @if (type-of($expression) == \"string\") {\r\n      $result: $result + $expression;\r\n    } @else if (type-of($expression) == \"list\") {\r\n      $result: $result + nth($expression, 1);\r\n      $has-groups: true;\r\n    } @else {\r\n      @warn '#{$expression} is not a valid expression.';\r\n    }\r\n  }\r\n\r\n  // If we have groups, we have to create all possible combinations\r\n  @if $has-groups {\r\n    @each $expression in $expressions {\r\n      @if (type-of($expression) == \"list\") {\r\n        $first: nth($expression, 1);\r\n\r\n        @each $member in $expression {\r\n          @if ($member != $first) {\r\n            @each $partial in $result {\r\n              $result: join(\r\n                $result,\r\n                str-replace-first($first, $member, $partial)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n///\r\n/// Parses a string to form a media query expression\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {String}   $expression  - expression (in string)\r\n///\r\n/// @throws Expression with type `type-of($expression)` detected, string expected\r\n/// @throws `$expression` is missing an operator\r\n/// @throws Unknown unit: `$unit`\r\n///\r\n/// @return {String | Null}\r\n///\r\n@function parse-expression($expression) {\r\n  $operator: \"\";\r\n  $value: \"\";\r\n  $element: \"\";\r\n  $result: \"\";\r\n  $is-width: true;\r\n\r\n  @if (type-of($expression) != \"string\") {\r\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\r\n  }\r\n\r\n  // Separating the operator from the rest of the expression\r\n  @if (str-slice($expression, 2, 2) == \"=\") {\r\n    $operator: str-slice($expression, 1, 2);\r\n    $value: str-slice($expression, 3);\r\n  } @else {\r\n    $operator: str-slice($expression, 1, 1);\r\n    $value: str-slice($expression, 2);\r\n  }\r\n\r\n  // Checking what type of expression we're dealing with\r\n  @if map-has-key($breakpoints, $value) {\r\n    $result: map-get($breakpoints, $value);\r\n  } @else if map-has-key($media-expressions, $expression) {\r\n    $result: map-get($media-expressions, $expression);\r\n    $is-width: false;\r\n  } @else {\r\n    $result: to-number($value);\r\n  }\r\n\r\n  @if ($is-width) {\r\n    $unit: unit($result);\r\n    $interval: 0;\r\n\r\n    @if (map-has-key($unit-intervals, $unit)) {\r\n      $interval: map-get($unit-intervals, $unit);\r\n    } @else {\r\n      @warn 'Unknown unit: #{$unit}';\r\n    }\r\n\r\n    @if ($operator == \">\") {\r\n      $element: \"(min-width: #{$result + $interval})\";\r\n    } @else if ($operator == \"<\") {\r\n      $element: \"(max-width: #{$result - $interval})\";\r\n    } @else if ($operator == \">=\") {\r\n      $element: \"(min-width: #{$result})\";\r\n    } @else if ($operator == \"<=\") {\r\n      $element: \"(max-width: #{$result})\";\r\n    } @else {\r\n      @warn '#{$expression} is missing an operator.';\r\n    }\r\n  } @else {\r\n    $element: $result;\r\n  }\r\n\r\n  @return $element;\r\n}\r\n\r\n///\r\n/// Replaces the first occurence of the string with the replacement string\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {String}   $search  - The value being searched for\r\n/// @param {String}   $replace  - The replacement string\r\n/// @param {String}   $subject  - The string being replaced on\r\n///\r\n/// @return {String | Null}\r\n///\r\n@function str-replace-first($search, $replace, $subject) {\r\n  $search-start: str-index($subject, $search);\r\n\r\n  @if $search-start == null {\r\n    @return $subject;\r\n  }\r\n\r\n  $result: str-slice($subject, 0, $search-start - 1);\r\n  $result: $result + $replace;\r\n  $result: $result + str-slice($subject, $search-start + str-length($search));\r\n\r\n  @return $result;\r\n}\r\n\r\n///\r\n/// Casts a number to a string\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @param {String}   $string  - Number to be parsed\r\n///\r\n/// @return {List | Null}\r\n///\r\n@function to-number($string) {\r\n  // Matrices\r\n  $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\r\n  $numbers: 0 1 2 3 4 5 6 7 8 9;\r\n\r\n  // Result\r\n  $result: 0;\r\n  $divider: 0;\r\n  $minus: false;\r\n\r\n  // Looping through all characters\r\n  @for $i from 1 through str-length($string) {\r\n    $character: str-slice($string, $i, $i);\r\n    $index: index($strings, $character);\r\n\r\n    @if $character == \"-\" {\r\n      $minus: true;\r\n    } @else if $character == \".\" {\r\n      $divider: 1;\r\n    } @else {\r\n      @if type-of($index) != \"number\" {\r\n        $result: if($minus, $result * -1, $result);\r\n        @return _length($result, str-slice($string, $i));\r\n      }\r\n\r\n      $number: nth($numbers, $index);\r\n\r\n      @if $divider == 0 {\r\n        $result: $result * 10;\r\n      } @else {\r\n        // Move the decimal dot to the left\r\n        $divider: $divider * 10;\r\n        $number: $number / $divider;\r\n      }\r\n\r\n      $result: $result + $number;\r\n    }\r\n  }\r\n\r\n  @return if($minus, $result * -1, $result);\r\n}\r\n\r\n@function _length($number, $unit) {\r\n  $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\r\n    \"vh\" \"vmin\" \"vmax\";\r\n  $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\r\n  $index: index($strings, $unit);\r\n\r\n  @if type-of($index) != \"number\" {\r\n    @warn 'Unknown unit `#{$unit}`.';\r\n    @return false;\r\n  }\r\n\r\n  @return $number * nth($units, $index);\r\n}\r\n\r\n/**\r\n*\r\n* Testing\r\n*\r\n**/\r\n"]}