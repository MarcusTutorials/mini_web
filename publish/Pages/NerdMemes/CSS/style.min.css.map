{"version":3,"sources":["_settings.sass","style.sass","breakpoints.scss"],"names":[],"mappings":"AAAA,mFAAY,CACZ,6JAAY,CAiBZ,QACI,YAAa,CACb,sBAAuB,CACvB,oBAAqB,CClBzB,KACI,wBDAgB,CCChB,UAAW,CACX,SAAU,CACV,QAAS,CACT,WAAY,CAAG,+BAKf,GACI,aDFY,CCGhB,IACI,aDHY,CCIhB,IACI,aDJY,CCKhB,IACI,aDLY,CCMhB,IACI,aDNY,CCQhB,GACI,aDbY,CAAA,CCJD,uBAKf,GACI,aDFY,CCGhB,IACI,aDHY,CCIhB,IACI,aDJY,CCKhB,IACI,aDLY,CCMhB,IACI,aDNY,CCQhB,GACI,aDbY,CAAA,CCiBpB,GACK,cAAe,CACf,aD1BgB,CC2BhB,2BDvBuB,CCwBvB,iBAAkB,CAClB,UAAW,CACX,8CAAuC,CAAvC,sCAAuC,CACvC,SAAU,CAEa,yBAT5B,GASQ,cAAe,CAAK,CAS5B,UACI,SAAU,CACV,QAAS,CACT,SAAU,CACV,SAAU,CAAG,OAGb,2BD7CwB,CC8CxB,eAAgB,CAChB,aDlDiB,CCmDjB,uBAAyB,CACzB,oBAAqB,CACrB,mBAAsB,CACtB,cAAe,CACf,SAAU,CARd,UAYQ,sBAA6B,CAC7B,SAAU,CACV,iBAAkB,CAClB,uBAAyB,CACzB,mBAAqB,CACrB,mBAAoB,CAjB5B,cAoBQ,mBAAoB,CApB5B,mBAwBQ,eAAgB,CAEhB,SAAU,CA1BlB,uBA6BY,WAAY,CACZ,gBAAiB,CACjB,mBAAoB,CAI9B,yBAnCF,uBAkCgB,WAAY,CAC1B,CAEF,aACI,aDtFiB,CCuFjB,cAAe,CAFnB,gBAKQ,SAAU,CACV,kBAAmB,CACnB,SAAU,CAAG,aAUjB,cAAe,CAMW,yBAP9B,aAIQ,eAAiB,CAGK,CCH5B,yBDJF,aAOQ,eAAiB,CAAK,CAK9B,aACI,gBAAiB,CAMO,yBAP5B,aAIQ,cAAe,CAGK,CCf1B,yBDQF,aAOQ,cAAe,CAAK,CAG5B,aACI,cAAe,CAEW,yBAH9B,aAGQ,gBAAiB,CAAK,CAE9B,aACI,cAAe,CAMW,yBAP9B,aAIQ,gBAAiB,CAGK,CC9B5B,yBDuBF,aAOQ,gBAAiB,CAAK,CAE9B,aACI,cAAe,CAMS,yBAP5B,aAIQ,cAAe,CAGK,CCvC1B,yBDgCF,aAOQ,cAAe,CAAK,CAU5B,SACI,aDpJgB,CCoJK,SAGrB,aDtJgB,CCsJK,SAGrB,aDxJgB,CCwJK,SAGrB,aD1JgB,CC0JK,SAGrB,aD5JgB,CC4JK,0BAQrB,GACI,UAAW,CACX,QAAY,CAEhB,GACI,SAAU,CACV,UAAW,CAAA,CAdM,kBAQrB,GACI,UAAW,CACX,QAAY,CAEhB,GACI,SAAU,CACV,UAAW,CAAA,CAEnB,iBACI,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,KAAM,CACN,eAAgB,CAChB,SAAU,CACV,mBAAoB,CAPxB,qBAUQ,UAAW,CACX,iBAAkB,CAClB,SAAU,CACV,yCAAkC,CAAlC,iCAAkC,CAClC,UAAY,CAAG,OASnB,cAAe,CACf,QAAY,CACZ,yBAAgC,CAChC,kBAAmB,CACnB,SAAU,CACV,cAAkB,CAClB,UAAW,CACX,iBAAkB,CAClB,kBDvNgB","file":"style.min.css","sourcesContent":["@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');\n\n\n$firstcolor: #231e41;\n$secondcolor: #e4fbff;\n$middlecolor: #b8b5ff;\n$shadowcolor: #1b144d15;\n\n$fontpixel: 'Press Start 2P';\n\n\n$fontcolor1: #b8b5ff;\n$fontcolor2: #b5ffda;\n$fontcolor3: #ffb5e0;\n$fontcolor4: #ffeeb5;\n$fontcolor5: #b5fffb;\n\n.flex-h {\n    display: flex;\n    justify-content: center;\n    align-content: center; }\n","@import \"./_settings\";\n@import \"./breakpoints\";\n\nbody {\n    background-color: $firstcolor;\n    width: 100%;\n    padding: 0;\n    margin: 0;\n    height: 100%; }\n\n\n\n@keyframes colorchange {\n    0% {\n        color: $fontcolor1; }\n    20% {\n        color: $fontcolor2; }\n    40% {\n        color: $fontcolor3; }\n    60% {\n        color: $fontcolor4; }\n    80% {\n        color: $fontcolor5; }\n\n    100% {\n        color: $fontcolor1; } }\n\n\n\nh1 {\n     font-size: 7rem;\n     color: $secondcolor;\n     font-family: $fontpixel;\n     text-align: center;\n     width: 100%;\n     animation: colorchange 4s ease infinite;\n     z-index: 2;\n     @include media(\"<=phone\") {\n        font-size: 4rem; } }\n\n\n\n\n// ###################################\n// TagCloud\n// ###################################\n\n#TagCloud {\n    width: 70%;\n    margin: 0;\n    padding: 0;\n    z-index: 2; }\n\n.tagcl {\n    font-family: $fontpixel;\n    list-style: none;\n    color: $middlecolor;\n    transition: all 0.5s ease;\n    display: inline-block;\n    padding: 0.2rem 0.4rem;\n    font-size: 1rem;\n    z-index: 2;\n\n    ul {\n        margin: 0;\n        margin: 1rem 0rem 0rem -10rem;\n        opacity: 0;\n        position: absolute;\n        transition: all 0.4s ease;\n        transform: scale(0.3);\n        pointer-events: none; }\n\n    .video {\n        pointer-events: auto; }\n\n\n    .tagcontent {\n        list-style: none;\n\n        z-index: 3;\n\n        img {\n            width: 30rem;\n            border-radius: 3%;\n            pointer-events: none;\n\n            @include media(\"<=phone\") {\n                width: 20rem; }\n } } }            // display: none\n\n.tagcl:hover {\n    color: $secondcolor;\n    cursor: pointer;\n\n    ul {\n        opacity: 1;\n        transform: scale(1);\n        z-index: 4; } }\n\n\n\n\n// ###################################\n// Random Fontsize\n// ###################################\n\n.Font_Size_1 {\n    font-size: 1rem;\n\n    @include media(\"<=tablet\") {\n        font-size: 0.6rem; }\n\n    @include media(\"<=phone\") {\n        font-size: 0.6rem; } }\n\n\n\n\n.Font_Size_2 {\n    font-size: 1.4rem;\n\n    @include media(\"<=tablet\") {\n        font-size: 1rem; }\n\n    @include media(\"<=phone\") {\n        font-size: 1rem; } }\n\n\n.Font_Size_3 {\n    font-size: 2rem;\n    @include media(\"<=phone\") {\n        font-size: 1.3rem; } }\n\n.Font_Size_4 {\n    font-size: 3rem;\n\n    @include media(\"<=tablet\") {\n        font-size: 2.4rem; }\n\n    @include media(\"<=phone\") {\n        font-size: 1.6rem; } }\n\n.Font_Size_5 {\n    font-size: 4rem;\n\n    @include media(\"<=tablet\") {\n        font-size: 3rem; }\n\n    @include media(\"<=phone\") {\n        font-size: 2rem; } }\n\n\n\n\n\n// ###################################\n// Random Rotation\n// ###################################\n\n.Color_1 {\n    color: $fontcolor1; }\n\n.Color_2 {\n    color: $fontcolor2; }\n\n.Color_3 {\n    color: $fontcolor3; }\n\n.Color_4 {\n    color: $fontcolor4; }\n\n.Color_5 {\n    color: $fontcolor5; }\n\n\n\n// ###################################\n// Background Style\n// ###################################\n@keyframes Bonbon {\n    0% {\n        left: -4rem;\n        bottom: 0rem; }\n\n    100% {\n        left: 100%;\n        bottom: 30%; } }\n\n.backgroundstyle {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    overflow: hidden;\n    z-index: 1;\n    pointer-events: none;\n\n    img {\n        width: 4rem;\n        position: absolute;\n        z-index: 1;\n        animation: Bonbon 2s ease infinite;\n        opacity: 0.4; } }\n\n\n\n\n// ###################################\n// Footer\n// ###################################\nfooter {\n    position: fixed;\n    bottom: 0rem;\n    color: rgba(255, 255, 255, 0.39);\n    font-family: Roboto;\n    z-index: 5;\n    padding: 1rem 0rem;\n    width: 100%;\n    text-align: center;\n    background: $firstcolor; }\n\n","$breakpoints: (\n  \"phone\": 596px,\n  \"tablet\": 768px,\n  \"desktop\": 1366px,\n  \"LGdesktop\": 1920px\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///\t\t'retina2x': (\n///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\n///\t\t\t'(min-resolution: 192dpi)'\n///\t\t)\n///\t);\n///\n$media-expressions: (\n  \"screen\": \"screen\",\n  \"print\": \"print\",\n  \"handheld\": \"handheld\",\n  \"retina2x\": (\n    \"(-webkit-min-device-pixel-ratio: 2)\",\n    \"(min-resolution: 192dpi)\"\n  ),\n  \"retina3x\": (\n    \"(-webkit-min-device-pixel-ratio: 3)\",\n    \"(min-resolution: 350dpi)\"\n  )\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media(\">128px\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media(\">20em\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media(\">2.0rem\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  \"px\": 1,\n  \"em\": 0.01,\n  \"rem\": 0.1\n) !default;\n///\n/// Generates a media query based on a list of conditions\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media(\">phone\") { }\n///\n/// @example scss - With two set breakpoints\n///  @include media(\">phone\", \"<=tablet\") { }\n///\n/// @example scss - With custom values\n///  @include media(\">=358px\", \"<850px\") { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media(\">desktop\", \"<=1350px\") { }\n///\n/// @example scss - With a static expression\n///  @include media(\"retina2x\") { }\n///\n/// @example scss - Mixing everything\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\n///\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth(\n      $conditions,\n      $i,\n      parse-expression(nth($conditions, $i))\n    );\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: \"\";\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + \", \";\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n\n///\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $expressions  - list of expressions\n///\n/// @throws `$expression` is not a valid expression\n///\n/// @return {List | Null}\n///\n@function get-query-branches($expressions) {\n  $result: \"\";\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (str-length($result) != 0) {\n      $result: $result + \" and \";\n    }\n\n    @if (type-of($expression) == \"string\") {\n      $result: $result + $expression;\n    } @else if (type-of($expression) == \"list\") {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (type-of($expression) == \"list\") {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join(\n                $result,\n                str-replace-first($first, $member, $partial)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n///\n/// Parses a string to form a media query expression\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $expression  - expression (in string)\n///\n/// @throws Expression with type `type-of($expression)` detected, string expected\n/// @throws `$expression` is missing an operator\n/// @throws Unknown unit: `$unit`\n///\n/// @return {String | Null}\n///\n@function parse-expression($expression) {\n  $operator: \"\";\n  $value: \"\";\n  $element: \"\";\n  $result: \"\";\n  $is-width: true;\n\n  @if (type-of($expression) != \"string\") {\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (str-slice($expression, 2, 2) == \"=\") {\n    $operator: str-slice($expression, 1, 2);\n    $value: str-slice($expression, 3);\n  } @else {\n    $operator: str-slice($expression, 1, 1);\n    $value: str-slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map-has-key($breakpoints, $value) {\n    $result: map-get($breakpoints, $value);\n  } @else if map-has-key($media-expressions, $expression) {\n    $result: map-get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: unit($result);\n    $interval: 0;\n\n    @if (map-has-key($unit-intervals, $unit)) {\n      $interval: map-get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    }\n\n    @if ($operator == \">\") {\n      $element: \"(min-width: #{$result + $interval})\";\n    } @else if ($operator == \"<\") {\n      $element: \"(max-width: #{$result - $interval})\";\n    } @else if ($operator == \">=\") {\n      $element: \"(min-width: #{$result})\";\n    } @else if ($operator == \"<=\") {\n      $element: \"(max-width: #{$result})\";\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n///\n/// Replaces the first occurence of the string with the replacement string\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $search  - The value being searched for\n/// @param {String}   $replace  - The replacement string\n/// @param {String}   $subject  - The string being replaced on\n///\n/// @return {String | Null}\n///\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n///\n/// Casts a number to a string\n///\n/// @author Hugo Giraudel\n///\n/// @param {String}   $string  - Number to be parsed\n///\n/// @return {List | Null}\n///\n@function to-number($string) {\n  // Matrices\n  $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\n  $numbers: 0 1 2 3 4 5 6 7 8 9;\n\n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n\n    @if $character == \"-\" {\n      $minus: true;\n    } @else if $character == \".\" {\n      $divider: 1;\n    } @else {\n      @if type-of($index) != \"number\" {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n\n      @if $divider == 0 {\n        $result: $result * 10;\n      } @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n\n      $result: $result + $number;\n    }\n  }\n\n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\n    \"vh\" \"vmin\" \"vmax\";\n  $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\n  $index: index($strings, $unit);\n\n  @if type-of($index) != \"number\" {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n\n  @return $number * nth($units, $index);\n}\n\n/**\n*\n* Testing\n*\n**/\n"]}