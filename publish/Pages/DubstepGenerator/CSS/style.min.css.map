{"version":3,"sources":["_settings.sass","style.sass","breakpoints.scss"],"names":[],"mappings":"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","file":"style.min.css","sourcesContent":["@import \"./breakpoints\";\n\n$color_main: rgb(8, 217, 214);\n$color_secondary: rgb(255, 46, 99);\n\n$color_bg_light: rgb(234, 234, 234);\n$color_bg: rgb(37, 42, 52);\n$color_bg_red: rgb(77, 23, 37);\n$wh: rgb(255, 255, 255);\n\n\n//Fonts\n@font-face {\n   font-family: 'RobotoR';\n   src: url('../FONTS/Roboto-Regular.ttf') format(\"truetype\"); }\n\n@font-face {\n   font-family: 'RobotoB';\n   src: url('../FONTS/Roboto-Bold.ttf') format(\"truetype\"); }\n\n@font-face {\n   font-family: 'RobotoM';\n   src: url('../FONTS/Roboto-Medium.ttf') format(\"truetype\"); }\n\n@font-face {\n   font-family: 'Anton';\n   src: url('../FONTS/Anton-Regular.ttf') format(\"truetype\"); }\n\n\n$Roboto_R: 'RobotoR';\n$Roboto_B: 'RobotoB';\n$Roboto_M: 'RobotoM';\n$Anton: 'Anton';\n\n\n::-webkit-scrollbar {\n    width:  0.7rem;\n    height: 0.7rem;\n    @include media(\"<=phone\") {\n        width: 0.5rem;\n        height: 0.5rem; } }\n\n\n::-webkit-scrollbar-thumb {\n    background: $color_secondary; }\n\n\n::-webkit-scrollbar-track {\n    background: $color_bg; }\n\n\n\nsection {\n    width: 100%; }\n\n.flex-center {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-wrap: nowrap;\n    @include media(\"<=phone\") {\n        flex-wrap: wrap; } }\n\n\n.flex-h {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap; }\n\nbody {\n    margin: 0;\n    padding: 0;\n    background: linear-gradient(45deg, $color_bg 0%, $color_bg_red 100%);\n    width: 100%;\n    overflow-x: hidden; }\n","@import \"./_settings\";\n@import \"./breakpoints\";\n\nsection {\n    width: 100%;\n    height: 100vh;\n    margin-bottom: 200px;\n\n    .DubstepBox {\n        width: 50%;\n        background: linear-gradient(45deg, rgba(255, 255, 255, 0.714) 0%, rgba(255, 149, 190, 0.714) 100%);\n        border-radius: 30px;\n        overflow: hidden;\n        padding: 0rem 0rem 3rem 0rem;\n        backdrop-filter: blur(20px);\n        z-index: 2;\n        box-shadow: 6px 6px 40px rgba(0, 0, 0, 0.514);\n        @include media(\"<=desktop\") {\n            width: 80%; }\n        @include media(\"<=phone\") {\n            width: 90%; }\n\n        h1 {\n            font-family: $Anton;\n            color: $color_bg;\n            letter-spacing: 5px;\n            text-align: center;\n            font-size: 4rem;\n            margin: 0;\n            padding: 10px 0rem 10px 0rem;\n            width: 100%;\n            background: #ffffffc7;\n            margin-bottom: 50px;\n            @include media(\"<=phone\") {\n                font-size: 3rem; } }\n\n\n        .ButtonContainer {\n            width: 100%;\n            .ButtonList {\n                width: 50rem;\n                button {\n                    width: 200px;\n                    height: 200px;\n                    border: none;\n                    margin: 10px;\n                    overflow: hidden;\n                    padding: 0;\n                    border-radius: 30px;\n                    box-shadow: 6px 6px 10px rgba(0, 0, 0, 0.068);\n                    transition: all 0.3s ease;\n                    @include media(\"<=desktop\") {\n                        width: 130px;\n                        height: 130px; } }\n                button:hover {\n                    transform: scale(1.1);\n                    cursor: pointer; }\n                .activebtn {\n                    background: $color_secondary;\n                    img {\n                        width: 100%; }\n                    .invertIcon {\n                        filter: invert(100%); } } } } } }\n\n\n\n//###############################\n//Background Circles\n//###############################\n@keyframes circleanim {\n    0% {\n        transform: scale(0.3) translate(0, 0);\n        opacity: 0.6; }\n\n    50% {\n        transform: scale(1);\n        opacity: 1; }\n\n    100% {\n        transform: scale(0.3) translate(0, 0);\n        opacity: 0.6; } }\n\n@keyframes innercircle {\n    0% {\n        transform: scale(0.4); }\n    50% {\n        transform: scale(1); }\n    100% {\n        transform: scale(0.4); } }\n\n.circle {\n    border-radius: 50%;\n    position: absolute;\n    z-index: 1;\n    background: $color_secondary;\n    box-shadow: 6px 6px 10px rgba(0, 0, 0, 0.068);\n    animation: circleanim 4s ease infinite;\n\n    .circleIn {\n        width: 50%;\n        height: 50%;\n        background: #ffffff8a;\n        border-radius: 50%;\n        animation: innercircle 2s ease infinite; }\n\n    .circleIn1 {\n        animation-duration: 2.4s; }\n\n    .circleIn2 {\n        animation-duration: 3.4s; }\n\n    .circleIn3 {\n        animation-duration: 2.7s; }\n\n    .circleIn4 {\n        animation-duration: 4s; } }\n\n.circle1 {\n    width: 20rem;\n    height: 20rem;\n    top: 60%;\n    left: 30%;\n    animation-duration: 3s; }\n\n.circle2 {\n    width: 13rem;\n    height: 13rem;\n    top: 40%;\n    left: 80%;\n    animation-duration: 5s; }\n\n.circle3 {\n    width: 7rem;\n    height: 7rem;\n    top: 10%;\n    left: 15%; }\n\n.circle4 {\n    width: 9rem;\n    height: 9rem;\n    top: 80%;\n    left: 10%;\n    animation-duration: 4.6s; }\n\n\n\n//###############################\n//Footer\n//###############################\nfooter {\n    height: 5rem;\n    background: $color_bg;\n    font-family: $Roboto_R;\n    color: #eaeaeaa2;\n    text-align: center;\n    font-size: 1rem;\n    padding: 10px 0px; }\n\n","$breakpoints: (\r\n  \"phone\": 610px,\r\n  \"tablet\": 768px,\r\n  \"desktop\": 1366px,\r\n  \"LGdesktop\": 1920px\r\n) !default;\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///\t\t'retina2x': (\r\n///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\r\n///\t\t\t'(min-resolution: 192dpi)'\r\n///\t\t)\r\n///\t);\r\n///\r\n$media-expressions: (\r\n  \"screen\": \"screen\",\r\n  \"print\": \"print\",\r\n  \"handheld\": \"handheld\",\r\n  \"retina2x\": (\r\n    \"(-webkit-min-device-pixel-ratio: 2)\",\r\n    \"(min-resolution: 192dpi)\"\r\n  ),\r\n  \"retina3x\": (\r\n    \"(-webkit-min-device-pixel-ratio: 3)\",\r\n    \"(min-resolution: 350dpi)\"\r\n  )\r\n) !default;\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media(\">128px\") {}\r\n///\r\n///\t /* Generates: */\r\n///\t @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media(\">20em\") {}\r\n///\r\n///\t /* Generates: */\r\n///\t @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media(\">2.0rem\") {}\r\n///\r\n///\t /* Generates: */\r\n///\t @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  \"px\": 1,\r\n  \"em\": 0.01,\r\n  \"rem\": 0.1\r\n) !default;\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {List}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media(\">phone\") { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media(\">phone\", \"<=tablet\") { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media(\">=358px\", \"<850px\") { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media(\">desktop\", \"<=1350px\") { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media(\"retina2x\") { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\r\n///\r\n@mixin media($conditions...) {\r\n  @for $i from 1 through length($conditions) {\r\n    $conditions: set-nth(\r\n      $conditions,\r\n      $i,\r\n      parse-expression(nth($conditions, $i))\r\n    );\r\n  }\r\n\r\n  $branches: get-query-branches($conditions);\r\n  $query: \"\";\r\n\r\n  @each $branch in $branches {\r\n    @if (str-length($query) != 0) {\r\n      $query: $query + \", \";\r\n    }\r\n\r\n    $query: $query + $branch;\r\n  }\r\n\r\n  @media #{$query} {\r\n    @content;\r\n  }\r\n}\r\n\r\n///\r\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {List}   $expressions  - list of expressions\r\n///\r\n/// @throws `$expression` is not a valid expression\r\n///\r\n/// @return {List | Null}\r\n///\r\n@function get-query-branches($expressions) {\r\n  $result: \"\";\r\n  $has-groups: false;\r\n\r\n  // Getting initial snapshot and looking for groups\r\n  @each $expression in $expressions {\r\n    @if (str-length($result) != 0) {\r\n      $result: $result + \" and \";\r\n    }\r\n\r\n    @if (type-of($expression) == \"string\") {\r\n      $result: $result + $expression;\r\n    } @else if (type-of($expression) == \"list\") {\r\n      $result: $result + nth($expression, 1);\r\n      $has-groups: true;\r\n    } @else {\r\n      @warn '#{$expression} is not a valid expression.';\r\n    }\r\n  }\r\n\r\n  // If we have groups, we have to create all possible combinations\r\n  @if $has-groups {\r\n    @each $expression in $expressions {\r\n      @if (type-of($expression) == \"list\") {\r\n        $first: nth($expression, 1);\r\n\r\n        @each $member in $expression {\r\n          @if ($member != $first) {\r\n            @each $partial in $result {\r\n              $result: join(\r\n                $result,\r\n                str-replace-first($first, $member, $partial)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n///\r\n/// Parses a string to form a media query expression\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {String}   $expression  - expression (in string)\r\n///\r\n/// @throws Expression with type `type-of($expression)` detected, string expected\r\n/// @throws `$expression` is missing an operator\r\n/// @throws Unknown unit: `$unit`\r\n///\r\n/// @return {String | Null}\r\n///\r\n@function parse-expression($expression) {\r\n  $operator: \"\";\r\n  $value: \"\";\r\n  $element: \"\";\r\n  $result: \"\";\r\n  $is-width: true;\r\n\r\n  @if (type-of($expression) != \"string\") {\r\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\r\n  }\r\n\r\n  // Separating the operator from the rest of the expression\r\n  @if (str-slice($expression, 2, 2) == \"=\") {\r\n    $operator: str-slice($expression, 1, 2);\r\n    $value: str-slice($expression, 3);\r\n  } @else {\r\n    $operator: str-slice($expression, 1, 1);\r\n    $value: str-slice($expression, 2);\r\n  }\r\n\r\n  // Checking what type of expression we're dealing with\r\n  @if map-has-key($breakpoints, $value) {\r\n    $result: map-get($breakpoints, $value);\r\n  } @else if map-has-key($media-expressions, $expression) {\r\n    $result: map-get($media-expressions, $expression);\r\n    $is-width: false;\r\n  } @else {\r\n    $result: to-number($value);\r\n  }\r\n\r\n  @if ($is-width) {\r\n    $unit: unit($result);\r\n    $interval: 0;\r\n\r\n    @if (map-has-key($unit-intervals, $unit)) {\r\n      $interval: map-get($unit-intervals, $unit);\r\n    } @else {\r\n      @warn 'Unknown unit: #{$unit}';\r\n    }\r\n\r\n    @if ($operator == \">\") {\r\n      $element: \"(min-width: #{$result + $interval})\";\r\n    } @else if ($operator == \"<\") {\r\n      $element: \"(max-width: #{$result - $interval})\";\r\n    } @else if ($operator == \">=\") {\r\n      $element: \"(min-width: #{$result})\";\r\n    } @else if ($operator == \"<=\") {\r\n      $element: \"(max-width: #{$result})\";\r\n    } @else {\r\n      @warn '#{$expression} is missing an operator.';\r\n    }\r\n  } @else {\r\n    $element: $result;\r\n  }\r\n\r\n  @return $element;\r\n}\r\n\r\n///\r\n/// Replaces the first occurence of the string with the replacement string\r\n///\r\n/// @author Eduardo Boucas\r\n///\r\n/// @param {String}   $search  - The value being searched for\r\n/// @param {String}   $replace  - The replacement string\r\n/// @param {String}   $subject  - The string being replaced on\r\n///\r\n/// @return {String | Null}\r\n///\r\n@function str-replace-first($search, $replace, $subject) {\r\n  $search-start: str-index($subject, $search);\r\n\r\n  @if $search-start == null {\r\n    @return $subject;\r\n  }\r\n\r\n  $result: str-slice($subject, 0, $search-start - 1);\r\n  $result: $result + $replace;\r\n  $result: $result + str-slice($subject, $search-start + str-length($search));\r\n\r\n  @return $result;\r\n}\r\n\r\n///\r\n/// Casts a number to a string\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @param {String}   $string  - Number to be parsed\r\n///\r\n/// @return {List | Null}\r\n///\r\n@function to-number($string) {\r\n  // Matrices\r\n  $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\r\n  $numbers: 0 1 2 3 4 5 6 7 8 9;\r\n\r\n  // Result\r\n  $result: 0;\r\n  $divider: 0;\r\n  $minus: false;\r\n\r\n  // Looping through all characters\r\n  @for $i from 1 through str-length($string) {\r\n    $character: str-slice($string, $i, $i);\r\n    $index: index($strings, $character);\r\n\r\n    @if $character == \"-\" {\r\n      $minus: true;\r\n    } @else if $character == \".\" {\r\n      $divider: 1;\r\n    } @else {\r\n      @if type-of($index) != \"number\" {\r\n        $result: if($minus, $result * -1, $result);\r\n        @return _length($result, str-slice($string, $i));\r\n      }\r\n\r\n      $number: nth($numbers, $index);\r\n\r\n      @if $divider == 0 {\r\n        $result: $result * 10;\r\n      } @else {\r\n        // Move the decimal dot to the left\r\n        $divider: $divider * 10;\r\n        $number: $number / $divider;\r\n      }\r\n\r\n      $result: $result + $number;\r\n    }\r\n  }\r\n\r\n  @return if($minus, $result * -1, $result);\r\n}\r\n\r\n@function _length($number, $unit) {\r\n  $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\r\n    \"vh\" \"vmin\" \"vmax\";\r\n  $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\r\n  $index: index($strings, $unit);\r\n\r\n  @if type-of($index) != \"number\" {\r\n    @warn 'Unknown unit `#{$unit}`.';\r\n    @return false;\r\n  }\r\n\r\n  @return $number * nth($units, $index);\r\n}\r\n\r\n/**\r\n*\r\n* Testing\r\n*\r\n**/\r\n"]}